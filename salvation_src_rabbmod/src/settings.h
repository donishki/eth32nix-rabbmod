// ETH32 - an Enemy Territory cheat for windows
// Copyright (c) 2007 eth32 team
// www.cheatersutopia.com & www.nixcoders.org

#pragma once
#define MAX_SETTING_VALUES	32

typedef enum {
	SETTING_INT,
	SETTING_FLOAT,
	SETTING_BOOL,
	SETTING_VEC3,
	SETTING_VEC4,
	SETTING_BYTE3,
	SETTING_STRING,
	MAX_SETTINGS
} settingtype_t;

typedef struct settingvalue_s {
	float value;
	const char *text;
} settingvalue_t;

typedef struct settingdef_s {
	const char *name;
	const char *defaultValue;
	settingtype_t type;
	void *target;
	const char *description;
	float min, max;
	settingvalue_t values[MAX_SETTING_VALUES];
} settingdef_t;

const static settingdef_t settingsDefs[] =
{
	// Name				Default			Type			Target
	//	Description
	//	Min / Max
	//		Value				TextValue
	/** *******************************************************************
					AIMBOT
	******************************************************************* **/
	{ "aimmode",			"1",			SETTING_INT,		(void*)&eth32.settings.aimMode,
		"master aimbot mode",
		AIMMODE_OFF, AIMMODE_MAX-1,
		{
			{ (int)AIMMODE_OFF,		"off" },
			{ (int)AIMMODE_NORMAL,		"normal" },
			{ (int)AIMMODE_HUMAN, 		"human" },
		},
	},
	{ "aimtype",			"4",			SETTING_INT,		(void*)&eth32.settings.aimType,
		"determines when the aimbot will activate",
		AIM_OFF, AIM_MAX-1,
		{
			{ (int)AIM_OFF,			"off" },
			{ (int)AIM_ON_FIRE,		"onfire" },
			{ (int)AIM_ON_BUTTON, 		"onbutton" },
			{ (int)AIM_ALWAYS,		"always" },
			{ (int)AIM_TRIGGER,		"trigger" },
		},
	},
	{ "autofire",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autofire,
		"aimbot will fire for you when target available\n   (autofire must be turned on per weapon aswell)",
	},
	{ "atkvalid",			"false",		SETTING_BOOL,		(void*)&eth32.settings.atkValidate,
		"inhibits firing, even manually, until a valid target is visible",
	},
	{ "locktarget",			"false",		SETTING_BOOL,		(void*)&eth32.settings.lockTarget,
		"once a target is aquired, aimbot will stay on this target while it remains visible",
	},
	{ "fov",			"360",			SETTING_FLOAT,		(void*)&eth32.settings.fov,
		"set the field of vision that the aimbot can select targets from",
		0, 360,
	},
	{ "aimsort",			"2",			SETTING_INT,		(void*)&eth32.settings.aimSort,
		"sets type of sort to be used with valid targets",
		SORT_OFF, SORT_MAX-1,
		{
			{ (int)SORT_OFF,		"off" },
			{ (int)SORT_DISTANCE,		"distance" },
			{ (int)SORT_ATTACKER,  		"attacker" },
			{ (int)SORT_CROSSHAIR,		"crosshair" },
			{ (int)SORT_KDRATIO,		"kdratio" },
			{ (int)SORT_ACCURACY,		"accuracy" },
			//{ (int)SORT_TARGETING,	"targeting" },
			{ (int)SORT_THREAT,		"threat" },
		},
	},
	{ "headbody",			"4",			SETTING_INT,		(void*)&eth32.settings.headbody,
		"determines if the aimbot uses the head or body and which order",
		0, AP_MAX-1,
		{
			{ (int)BODY_ONLY,		"bodyonly" },
			{ (int)HEAD_ONLY,		"headonly" },
			{ (int)BODY_HEAD,		"bodyfirst" },
			{ (int)HEAD_BODY,		"headfirst" },
			{ (int)HEAD_PRIORITY,		"headpriority" },
		},
	},
	{ "hitboxtype",			"1",			SETTING_INT,		(void*)&eth32.settings.hitboxType,
		"set the hitbox style to use for aimbot",
		HITBOX_OFF, HITBOX_MAX-1,
		{
			{ (int)HITBOX_ETMAIN,	"etmain" },
			{ (int)HITBOX_ETPUB,		"etpub" },
			{ (int)HITBOX_ETPRO,		"etpro" },
			{ (int)HITBOX_GENERIC,	"generic" },
			{ (int)HITBOX_CUSTOM,	"custom" },
		},
	},
	{ "headtracetype",			"2",			SETTING_INT,		(void*)&eth32.settings.headTraceType,
		"set the style of trace used to determine if a target is visible",
		0, HEAD_MAX-1,
		{
			{ (int)HEAD_CENTER,		"center" },
			{ (int)HEAD_STATIC,		"static" },
			{ (int)HEAD_XTRACE,		"xtrace" },
		},
	},
	{ "bodytracetype",			"2",			SETTING_INT,		(void*)&eth32.settings.bodyTraceType,
		"set the style of trace used to determine if a target is visible",
		0, BODY_MAX-1,
		{
			{ (int)BODY_CENTER,		"center" },
			{ (int)BODY_CONTOUR,		"contour" },
			{ (int)BODY_STATIC,		"static" },
			{ (int)BODY_XTRACE,		"xtrace" },
			{ (int)BODY_RANDOM_VOLUME,	"randvolume" },
			{ (int)BODY_RANDOM_SURFACE,	"randsurface" },
            		{ (int)BODY_CAPSULE_VOLUME,	"capvolume" },
            		{ (int)BODY_CAPSULE_SURFACE,	"capsurface" },
		},
	},
	{ "dynamichitbox",		"0.6",			SETTING_FLOAT,		(void*)&eth32.settings.dynamicHitboxScale,
		"set how much a hitbox will scale based on player movement",
		0, 3,
	},
	{ "animcor", 			"-2.000", 		SETTING_FLOAT, 		(void*)&eth32.settings.animCorrection,
		"animation correction for aimbot",
		-10, 10,
	},
	{ "autocrouch",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autoCrouch,
		"enable auto crouching when target is visible",
	},

	{ "grenadebot", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeBot,
		"toggles the grenade aimbot",
	},
	{ "riflebot", 			"false",		SETTING_BOOL,		(void*)&eth32.settings.rifleBot,
		"toggles the riflegrenade aimbot",
	},
	{ "grenblockfire", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeBlockFire,
		"blocks firing grenades by accident if there isn't a firing solution",
	},
	{ "valgrentrajectory", 		"true",			SETTING_BOOL, 		(void*)&eth32.settings.valGrenTrajectory,
		"make additional calculations to make sure the grenade doesn't hit anything",
	},
	{ "valrifletrajectory", 	"true",			SETTING_BOOL, 		(void*)&eth32.settings.valRifleTrajectory,
		"make additional calculations to make sure the riflegrenade doesn't hit anything",
	},
	{ "grenadetracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeTracer,
		"shows trajectory of the grenade",
	},
	{ "rifletracer", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.rifleTracer,
		"shows trajectory of the rifle grenade",
	},
	{ "grensenslock", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeSenslock,
		"locks view if there is a valid firing solution",
	},
	{ "riflenadeZ",			"12.5",			SETTING_FLOAT,		(void*)&eth32.settings.riflenadeZ,
		"z correction for rifle grenade aimpoint",
		-50, 50,
	},
	{ "grenadeZ",			"-50",			SETTING_FLOAT,		(void*)&eth32.settings.grenadeZ,
		"z correction for grenade aimpoint",
		-50, 50,
	},
	{ "grenfiredelay",		"125",			SETTING_INT,		(void*)&eth32.settings.grenadeFireDelay,
		"time left until the grenade explodes after it was launched",
		0, 1000,
	},
	{ "grenadeautofire", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.grenadeAutoFire,
		"auto-fire grenade so it will explode right on contact",
	},
	{ "rifleautofire", 		"false",		SETTING_BOOL,		(void*)&eth32.settings.rifleAutoFire,
		"auto-fire riflegrenade as soon as we have a firing solution",
	},
	{ "grenpredict",		"4",			SETTING_INT,		(void*)&eth32.settings.ballisticPredict,
		"predict targets for grenade aimbot",
		0, RF_PREDICT_MAX-1,
		{
			{ (int)RF_PREDICT_OFF, 		"off" },
			{ (int)RF_PREDICT_LINEAR, 	"linear" },
			{ (int)RF_PREDICT_LINEAR2, 	"linear2" },
			{ (int)RF_PREDICT_AVG, 		"avgpos" },
			{ (int)RF_PREDICT_SMART, 	"smart" },
		}
	},
	{ "radiusdamage_enable", 	"true",			SETTING_BOOL,		(void*)&eth32.settings.ballisticRadiusDamage,
		"if target is not visible, try a point within the grenade's blast radius",
	},
	{ "radiusdamage",		"100",			SETTING_FLOAT,		(void*)&eth32.settings.radiusDamage,
		"the grenade blast radius to use",
		30, 1000,
	},
	{ "grenautotarg",		"true",			SETTING_BOOL,		(void*)&eth32.settings.autoGrenTargets,
		"automatically selects grenade targets based on crosshair distance",
	},
	{ "multibounce",		"true",			SETTING_BOOL,		(void*)&eth32.settings.allowMultiBounce,
		"use extra CPU to calculate secondary trajectories with multiple bounces off walls",
	},

	{ "humanMode",			"0",			SETTING_INT,		(void*)&eth32.settings.humanMode,
		"which human method should be used",
		HUMAN_AIM_HALF_LOGINS, HUMAN_AIM_MAX-1,
		{
			{ (int)HUMAN_AIM_HALF_LOGINS,	"simple" },
			{ (int)HUMAN_AIM_FULL_LOGINS,	"full" },
		},
	},
	{ "human1_speed",		"0.05",			SETTING_FLOAT,		(void*)&eth32.settings.human1_speed,
		 "Simple Logins - Speed",
 		0, 0.2,
 	},
	{ "human2_humanValue",		"0.065",		SETTING_FLOAT,		(void*)&eth32.settings.human2_humanValue,
		 "FULL Logins - divMax",
 		0, 0.2,
 	},
	{ "human2_aimX",		"5.9",			SETTING_FLOAT,		(void*)&eth32.settings.human2_aimX,
		 "FULL Logins - SpeedX",
 		0, 10,
 	},
	{ "human2_aimY",		"10",			SETTING_FLOAT,		(void*)&eth32.settings.human2_aimY,
		 "FULL Logins - SpeedY",
 		0, 10,
 	},
	{ "human2_divMin",		"3.75",			SETTING_FLOAT,		(void*)&eth32.settings.human2_divMin,
		 "FULL Logins - divMin",
 		0, 10,
 	},
	{ "human2_divMax",		"5",			SETTING_FLOAT,		(void*)&eth32.settings.human2_divMax,
		 "FULL Logins - divMax",
 		0, 10,
 	},
 	{ "aimprotect",			"0",			SETTING_INT,		(void*)&eth32.settings.aimprotect,
		"turn off aimbot when people are watching",
		0, PROTECT_MAX-1,
		{
			{ (int)PROTECT_OFF,		"off" },
			{ (int)PROTECT_SPECS,		"specs" },
			{ (int)PROTECT_ALL,		"all" },
		},
	},
	{ "lockMouse",			"false",		SETTING_BOOL,		(void*)&eth32.settings.lockMouse,
		 "Lock mouse while aiming",
	},
	{ "randomaim",			"true",			SETTING_BOOL,		(void*)&eth32.settings.randomAim,
		 "enables randomized aiming for human mode",
	},
	{ "shakefreq",			"7000",			SETTING_INT,		(void*)&eth32.settings.shakeFreq,
		 "set how often the aim will bounce randomly (in ms)",
		1, 20000,
	},
	{ "randfactx",	   		"470",	    		SETTING_INT,		(void*)&eth32.settings.randFactX,
		"amount of randomness for random aim in the X axis",
		0, 1000,
	},
	{ "randfacty",	   		"470",	    		SETTING_INT,		(void*)&eth32.settings.randFactY,
		"amount of randomness for random aim in the Y axis",
		0, 1000,
	},
	{ "randfactz",	   		"700",	    		SETTING_INT,		(void*)&eth32.settings.randFactZ,
		"amount of randomness for random aim in the Z axis",
		0, 1000,
	},

	/** *******************************************************************
					AIMBOT EXTRA
	******************************************************************* **/
	{ "headsize",	   		"10",	    		SETTING_FLOAT,		(void*)&eth32.settings.headBoxSize,
		"head hitbox size",
		1, 15,
	},
	{ "bodysize",			"30",			SETTING_FLOAT,		(void*)&eth32.settings.bodybox,
		"body hitbox size",
		0, 40,
	},
	{ "autodelay",			"true",			SETTING_BOOL,		(void*)&eth32.settings.autoDelay,
		"enable weapon auto delay",
	},
	{ "delayclose",	   		"10",	   		SETTING_INT,		(void*)&eth32.settings.delayClose,
		"weapon delay for close distance",
		0, 50,
	},
	{ "delaymed",	   		"11",	   		SETTING_INT,		(void*)&eth32.settings.delayMed,
		"weapon delay for close distance",
		0, 50,
	},
	{ "delayfar",	   		"13",	    		SETTING_INT,		(void*)&eth32.settings.delayFar,
		"weapon delay for far distance",
		0, 50,
	},
	/*{ "bulletsize",			"1",			SETTING_INT,		(void*)&eth32.settings.bulletSize,
		"adjust bullet size to prevent shooting at wall instead of players when they're not visible",
		0, 5,
	},*/

	/*{ "vecstand",			"0.380 -0.300 6.000",		SETTING_VEC3,		(void*)eth32.settings.vecStand,
		"set the hitbox center point for a standing player",
	},
	{ "vecrun",			"0.000 0.000 6.000",		SETTING_VEC3,		(void*)eth32.settings.vecRun,
		"set the hitbox center point for a running player",
	},
	{ "veccrouch",			"-0.500 -0.240 5.500",		SETTING_VEC3,		(void*)eth32.settings.vecCrouch,
		"set the hitbox center point for a crouching player",
	},
	{ "veccrawl",			"0.000 0.000 5.500",		SETTING_VEC3,		(void*)eth32.settings.vecCrawl,
		"set the hitbox center point for a crawling player",
	},
	{ "vecprone",			"0.450 0.240 6.450",		SETTING_VEC3,		(void*)eth32.settings.vecProne,
		"set the hitbox center point for a prone player",
	},*/

	{ "standlowX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.standlowX,
		"stand X vecs, close range",
		-10.0, 10.0,
	},
	{ "standmedX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.standmedX,
		"stand X vecs, med range",
		-10.0, 10.0,
	},
	{ "standfarX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.standfarX,
		"stand X vecs, far range",
		-10.0, 10.0,
	},
	{ "standY",			"-0.2",			SETTING_FLOAT,		(void*)&eth32.settings.standY,
		"standing Y vecs",
		-10.0, 10.0,
	},
	{ "standlowZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.standlowZ,
		"stand Z vecs, close range",
		-10.0, 10.0,
	},
	{ "standmedZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.standmedZ,
		"stand Z vecs, med range",
		-10.0, 10.0,
	},
	{ "standfarZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.standfarZ,
		"stand Z vecs, far range",
		-10.0, 10.0,
	},
	{ "runlowX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.runlowX,
		"run X vecs, close range",
		-10.0, 10.0,
	},
	{ "runmedX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.runmedX,
		"run X vecs, med range",
		-10.0, 10.0,
	},
	{ "runfarX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.runfarX,
		"run X vecs, far range",
		-10.0, 10.0,
	},
	{ "runY",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.runY,
		"run Y vecs",
		-10.0, 10.0,
	},
	{ "runlowZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.runlowZ,
		"run Z vecs, close range",
		-10.0, 10.0,
	},
	{ "runmedZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.runmedZ,
		"run Z vecs, med range",
		-10.0, 10.0,
	},
	{ "runfarZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.runfarZ,
		"run Z vecs, far range",
		-10.0, 10.0,
	},
	{ "crouchlowX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crouchlowX,
		"crouch X vecs, close range",
		-10.0, 10.0,
	},
	{ "crouchmedX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crouchmedX,
		"crouch X vecs, med range",
		-10.0, 10.0,
	},
	{ "crouchfarX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crouchfarX,
		"crouch X vecs, far range",
		-10.0, 10.0,
	},
	{ "crouchY",			"-0.3",			SETTING_FLOAT,		(void*)&eth32.settings.crouchY,
		"crouch Y vecs",
		-10.0, 10.0,
	},
	{ "crouchlowZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crouchlowZ,
		"crouch Z vecs, close range",
		-10.0, 10.0,
	},
	{ "crouchmedZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crouchmedZ,
		"crouch Z vecs, med range",
		-10.0, 10.0,
	},
	{ "crouchfarZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crouchfarZ,
		"crouch Z vecs, far range",
		-10.0, 10.0,
	},
	{ "crawllowX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crawllowX,
		"crawl X vecs, close range",
		-10.0, 10.0,
	},
	{ "crawlmedX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crawlmedX,
		"crawl X vecs, med range",
		-10.0, 10.0,
	},
	{ "crawlfarX",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crawlfarX,
		"crawl X vecs, far range",
		-10.0, 10.0,
	},
	{ "crawlY",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crawlY,
		"crawl Y vecs",
		-10.0, 10.0,
	},
	{ "crawllowZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crawllowZ,
		"crawl Z vecs, close range",
		-10.0, 10.0,
	},
	{ "crawlmedZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crawlmedZ,
		"crawl Z vecs, med range",
		-10.0, 10.0,
	},
	{ "crawlfarZ",			"0.0",			SETTING_FLOAT,		(void*)&eth32.settings.crawlfarZ,
		"crawl Z vecs, far range",
		-10.0, 10.0,
	},
	{ "pronelowX",			"0.450",		SETTING_FLOAT,		(void*)&eth32.settings.pronelowX,
		"prone low X vecs",
		-10.0, 10.0,
	},
	{ "pronemedX",			"0.450",		SETTING_FLOAT,		(void*)&eth32.settings.pronemedX,
		"prone med X vecs",
		-10.0, 10.0,
	},
	{ "pronefarX",			"0.450",		SETTING_FLOAT,		(void*)&eth32.settings.pronefarX,
		"prone far X vecs",
		-10.0, 10.0,
	},
	{ "proneY",			"-0.450",		SETTING_FLOAT,		(void*)&eth32.settings.proneY,
		"prone Y vecs",
		-10.0, 10.0,
	},
	{ "pronelowZ",			"6.800",		SETTING_FLOAT,		(void*)&eth32.settings.pronelowZ,
		"prone low Z vecs",
		-10.0, 10.0,
	},
	{ "pronemedZ",			"6.800",		SETTING_FLOAT,		(void*)&eth32.settings.pronemedZ,
		"prone med Z vecs",
		-10.0, 10.0,
	},
	{ "pronefarZ",			"6.800",		SETTING_FLOAT,		(void*)&eth32.settings.pronefarZ,
		"prone far Z vecs",
		-10.0, 10.0,
	},

	{ "preshoot",			"true",			SETTING_BOOL,		(void*)&eth32.settings.preShoot,
		"pre-shoot at targets before they are logically visible",
	},
	{ "preaim",			"true",			SETTING_BOOL,		(void*)&eth32.settings.preAim,
		"preaim targets",
	},
	{ "preshoottime",		"50",			SETTING_FLOAT,		(void*)&eth32.settings.preShootTime,
		"preshoot time - higher means earlier shot (and higher chance of miss)",
		0, 300,
	},
	{ "preaimtime",			"60",			SETTING_FLOAT,		(void*)&eth32.settings.preAimTime,
		"preaim time - higher is earlier aiming",
		0, 300,
	},
	{ "predself_type",		"1",			SETTING_INT,		(void*)&eth32.settings.predSelfType,
		"set the type of self prediction to apply",
		0, SPR_MAX-1,
		{
			{ (int)SPR_OFF,			"off" },
			{ (int)SPR_MANUAL,		"manual" },
			{ (int)SPR_PING,		"ping" },
			{ (int)SPR_LEET,		"leet" },
		},
	},
	{ "predself",			"-0.020",		SETTING_FLOAT,		(void*)&eth32.settings.predSelf,
		"set amount to prediction to applied to our own movement (only for manual)",
		-0.1, 0.1,
	},
	{ "autopredbots", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.autoPredictBots,
		"auto adjust target prediction if target is an OmniBot",
	},
	{ "pred",			"-0.005",		SETTING_FLOAT,		(void*)&eth32.settings.pred,
		"set amount of prediction to be applied to human targets",
		-0.1, 0.1,
	},
	{ "predbot",			"-0.050",		SETTING_FLOAT,		(void*)&eth32.settings.predbot,
		"set amount of prediction to be applied to BOT targets",
		-0.1, 0.1,
	},


	/** *******************************************************************
					VISUALS
	******************************************************************* **/
	{ "orighud", 		"false", 		SETTING_BOOL, 		(void*)&eth32.settings.guiOriginal,
		"use the original ET hud",
	},
	{ "hackvisuals", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.drawHackVisuals,
		"draw hack visuals",
	},
	{ "wallhack",			"true",			SETTING_BOOL,		(void*)&eth32.settings.wallhack,
		"view players and items through walls",
	},
	{ "blackout",			"false",		SETTING_BOOL,		(void*)&eth32.settings.blackout,
		"display the blackout around scoped weapons",
	},
	{ "weapzoom",			"false",		SETTING_BOOL,		(void*)&eth32.settings.weaponZoom,
		"toggle weapon zoom for scoped weapons",
	},
	{ "scopedspeed",		"1.0",			SETTING_FLOAT,		(void*)&eth32.settings.scopedTurnSpeed,
		"determines turning speed while scoped, (normal unscoped speed = 1.0)",
		0.1, 1.0,
	},
	{ "smoketransp",		"0",			SETTING_INT,		(void*)&eth32.settings.smoketrnsp,
		"set the transparency of smoke",
		0,	100,
	},
	{ "radarrange",			"3000",			SETTING_FLOAT,		(void*)&eth32.settings.radarRange,
		"sets the range of the radar window",
		0, 10000,
	},
	{ "bannerscale", 		"1",			SETTING_FLOAT, 		(void*)&eth32.settings.BannerScale,
		"Banner font scale",
		0, 3,
	},
	{ "gui_banner", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.guiBanner,
		"GUI: show stats banner",
	},
	{ "bannerfmt", 			"^2[N] ^0- ^3Name: ^2[n] ^0- ^3Ping: ^2[P] &&^3Kills: ^2[k] ^0- ^3Deaths: ^2[d] ^0- ^3Spree: ^2[S] &&^3Headshots: ^2[/] ^0- ^3Accuracy: ^2[\\]^3% ^0- ^3Hs/Kill: ^2[<]", SETTING_STRING, (void*)eth32.settings.BannerFmt,
		"banner format",
	},
	{ "removefoliage",		"true",			SETTING_BOOL,		(void*)&eth32.settings.removeFoliage,
		"remove completely the foliage",
	},
	{ "warningmsgs",		"true",			SETTING_BOOL,		(void*)&eth32.settings.showReload,
		"draw warning messages ('RELOADING', 'LOW AMMO', etc)",
	},
	{ "dmgindicator",		"3",			SETTING_INT,		(void*)&eth32.settings.dmgIndicator,
		"draw damage indicator",
		0, DMG_MAX-1,
		{
			{ (int)DMG_OFF,		"off" },
			{ (int)DMG_HEALTH,	"health" },
			{ (int)DMG_ARROW,	"arrow" },
			{ (int)DMG_HP_ARR,	"health_arrow" },
		},
	},
	{ "dmgarrowsize", 		"96",			SETTING_FLOAT, 		(void*)&eth32.settings.dmgArrSize,
		"sets size of the damage indicator arrow",
		24, 128,
	},
	{ "removeparticles",		"true",			SETTING_BOOL,		(void*)&eth32.settings.removeParticles,
		"remove smoke particles when hitting other players",
	},

	{ "headhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadHitbox,
		"enable head hitbox drawing",
	},
	{ "headaxes",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadAxes,
		"enable hitbox axis drawing",
	},
	{ "bodyhitbox",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBodyHitbox,
		"enable body hitbox drawing",
	},
	{ "debugpoints",		"false",		SETTING_BOOL,		(void*)&eth32.settings.debugPoints,
		"enable drawing of generated aimpoints",
	},
	{ "bulletrail",			"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBulletRail,
		"enable bullet tracers",
	},
	{ "railwallhack",		"true",			SETTING_BOOL,		(void*)&eth32.settings.railWallhack,
		"see hitboxes and bullet tracers through walls",
	},
	{ "headhbtime",			"40",			SETTING_INT,		(void*)&eth32.settings.headRailTime,
		"set head hitbox stay time (in msec)",
		0, 1000,
	},
	{ "bodyhbtime",			"40",			SETTING_INT,		(void*)&eth32.settings.bodyRailTime,
		"set body hitbox stay time (in msec)",
		0, 1000,
	},

	{ "espname",			"true",			SETTING_BOOL,		(void*)&eth32.settings.espName,
		"display player names above their heads",
	},
	{ "grenadedlight",		"true",			SETTING_BOOL,		(void*)&eth32.settings.grenadeDlight,
		"extra grenade lights inidicating blast area",
	},
	{ "mortardlight",		"true",			SETTING_BOOL,		(void*)&eth32.settings.mortarDlight,
		"extra mortar lights inidicating blast area",
	},
	{ "disguised", 			"true", 		SETTING_BOOL, 		(void *)&eth32.settings.drawDisguised,
		"draw disguised ESP on players",
	},
	{ "mortartrace",		"true",			SETTING_BOOL,		(void*)&eth32.settings.mortarTrace,
		"show mortar trace lines and impact ESP",
	},
	{ "artymarkers",		"true",			SETTING_BOOL,		(void*)&eth32.settings.artyMarkers,
		"show arty blast area lights and ESP",
	},
	{ "classesp",			"1",			SETTING_INT,		(void*)&eth32.settings.classEspType,
		"set the class icon esp style",
		CLS_OFF, CLS_MAX-1,
		{
			{ (int)CLS_STATIC,		"off" },
			{ (int)CLS_STATIC,		"static" },
			{ (int)CLS_DIST,		"distance" },
		},
	},
	{ "oldclassicons",		"false",		SETTING_BOOL,		(void*)&eth32.settings.oldClsIcons,
		"display old class icon esp above player heads",
	},
	{ "classespsize",		"14",			SETTING_FLOAT,		(void*)&eth32.settings.clsSize,
		"set the class icon esp size",
		0, 30,
	},
	{ "classespopacity",		"0.8",			SETTING_FLOAT,		(void*)&eth32.settings.clsOpacity,
		"set the class icon esp opacity",
		0, 1,
	},
	{ "itemesp",			"true",			SETTING_BOOL,		(void*)&eth32.settings.itemEsp,
		"display health and ammo esp icons",
	},
	{ "itemespsize",		"14",			SETTING_FLOAT,		(void*)&eth32.settings.itemEspSize,
		"set the health and ammo icon esp size",
		0, 30,
	},
	{ "itemespopacity",		"0.8",			SETTING_FLOAT,		(void*)&eth32.settings.itemEspOpacity,
		"set the health and ammo icon esp opacity",
		0, 1,
	},
	{ "boxesp",			"true",			SETTING_BOOL,		(void*)&eth32.settings.boxEsp,
		"display a box around players",
	},
	{ "boxespborder",		"1",			SETTING_INT,		(void*)&eth32.settings.boxEspBorder,
		"set the box esp border size",
		0, 5,
	},
	{ "boxespopacity",		"0.8",			SETTING_FLOAT,		(void*)&eth32.settings.boxEspOpacity,
		"set the box esp opacity",
		0, 1,
	},

	/** *******************************************************************
					VISUAL EXTRA
	******************************************************************* **/
	{ "teamshader1",		"11",			SETTING_INT,		(void*)&eth32.settings.teamShader1,
		"set the style of chams to be applied to players",
		SHADER1_OFF, SHADER1_MAX-1,
		{
			{ (int)SHADER1_OFF,		"off" },
			{ (int)SHADER1_KERAMIC,		"keramic" },
			{ (int)SHADER1_CRISPWAVE,	"crispwave" },
			{ (int)SHADER1_CRYSTAL,		"crystal_a" },
			{ (int)SHADER1_CRYSTALB,	"crystal_b" },
			{ (int)SHADER1_GLOW,		"glow" },
			{ (int)SHADER1_FLAME,		"flame" },
			{ (int)SHADER1_SOLIDA,		"solid_a" },
			{ (int)SHADER1_SOLIDB,		"solid_b" },
			{ (int)SHADER1_QUADRED,		"quadred" },
			{ (int)SHADER1_QUADBLUE,	"quadblue" },
			{ (int)SHADER1_QUADMATRIXBLUE,	"quadmblue" },
			{ (int)SHADER1_QUADPURPLE,	"quadpurple" },
			{ (int)SHADER1_QUADGREEN,	"quadgreen" },
			{ (int)SHADER1_QUADYELLOW,	"quadyellow" },
 			{ (int)SHADER1_QUADBROWN,	"quadbrown" },
 			{ (int)SHADER1_QUADCYAN,	"quadcyan" },
			{ (int)SHADER1_QUADA,		"quad_a" },
			{ (int)SHADER1_QUADB,		"quad_b" },
			{ (int)SHADER1_QUADC,		"quad_c" },
			{ (int)SHADER1_QUADD,		"quad_d" },
			{ (int)SHADER1_MATRIX,		"matrix" },
			{ (int)SHADER1_THERMAL,		"thermal" },
      			{ (int)SHADER1_XRAY,		"xray" },
      			{ (int)SHADER1_GRID,		"grid" },
     			{ (int)SHADER1_WAVE,		"wave" },
      			{ (int)SHADER1_CRISPY,		"crispy" },
      			{ (int)SHADER1_MARBLE,		"marble" },
      			{ (int)SHADER1_PLASMA,		"plasma" },
      			{ (int)SHADER1_PLASTIC,		"plastic" },
      			{ (int)SHADER1_TEST,		"test" },
      			{ (int)SHADER1_KANKER,		"kanker" },
		},
	},
	{ "teamshader1wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.teamShader1Wallhack,
		"enable wallhack for players 1st shader",
	},
	{ "teamshader2",		"6",			SETTING_INT,		(void*)&eth32.settings.teamShader2,
		"set the style of chams to be applied to players outline",
		SHADER2_OFF, SHADER2_MAX-1,
		{
			{ (int)SHADER2_OFF,		"off" },
			{ (int)SHADER2_ORIG,		"original" },
			{ (int)SHADER2_MARBLE,		"marble" },
			{ (int)SHADER2_CRYSTAL,		"crystal" },
			{ (int)SHADER2_THERMAL,		"thermal" },
			{ (int)SHADER2_QUAD,		"quad" },
			{ (int)SHADER2_PLASMA,		"plasma" },
			{ (int)SHADER2_PLASTIC,		"plastic" },
			{ (int)SHADER2_KANKER,		"kanker" },
		},
	},
	{ "teamshader2wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.teamShader2Wallhack,
		"enable wallhack for players 2nd shader",
	},

	{ "enemyshader1",		"11",			SETTING_INT,		(void*)&eth32.settings.enemyShader1,
		"set the style of chams to be applied to players",
		SHADER1_OFF, SHADER1_MAX-1,
		{
			{ (int)SHADER1_OFF,		"off" },
			{ (int)SHADER1_KERAMIC,		"keramic" },
			{ (int)SHADER1_CRISPWAVE,	"crispwave" },
			{ (int)SHADER1_CRYSTAL,		"crystal_a" },
			{ (int)SHADER1_CRYSTALB,	"crystal_b" },
			{ (int)SHADER1_GLOW,		"glow" },
			{ (int)SHADER1_FLAME,		"flame" },
			{ (int)SHADER1_SOLIDA,		"solid_a" },
			{ (int)SHADER1_SOLIDB,		"solid_b" },
			{ (int)SHADER1_QUADRED,		"quadred" },
			{ (int)SHADER1_QUADBLUE,	"quadblue" },
			{ (int)SHADER1_QUADMATRIXBLUE,	"quadmblue" },
			{ (int)SHADER1_QUADPURPLE,	"quadpurple" },
			{ (int)SHADER1_QUADGREEN,	"quadgreen" },
			{ (int)SHADER1_QUADYELLOW,	"quadyellow" },
 			{ (int)SHADER1_QUADBROWN,	"quadbrown" },
 			{ (int)SHADER1_QUADCYAN,	"quadcyan" },
			{ (int)SHADER1_QUADA,		"quad_a" },
			{ (int)SHADER1_QUADB,		"quad_b" },
			{ (int)SHADER1_QUADC,		"quad_c" },
			{ (int)SHADER1_QUADD,		"quad_d" },
			{ (int)SHADER1_MATRIX,		"matrix" },
			{ (int)SHADER1_THERMAL,		"thermal" },
      			{ (int)SHADER1_XRAY,		"xray" },
      			{ (int)SHADER1_GRID,		"grid" },
     			{ (int)SHADER1_WAVE,		"wave" },
      			{ (int)SHADER1_CRISPY,		"crispy" },
      			{ (int)SHADER1_MARBLE,		"marble" },
      			{ (int)SHADER1_PLASMA,		"plasma" },
      			{ (int)SHADER1_PLASTIC,		"plastic" },
      			{ (int)SHADER1_TEST,		"test" },
      			{ (int)SHADER1_KANKER,		"kanker" },
		},
	},
	{ "enemyshader1wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.enemyShader1Wallhack,
		"enable wallhack for players 1st shader",
	},
	{ "enemyshader2",		"6",			SETTING_INT,		(void*)&eth32.settings.enemyShader2,
		"set the style of chams to be applied to players outline",
		SHADER2_OFF, SHADER2_MAX-1,
		{
			{ (int)SHADER2_OFF,		"off" },
			{ (int)SHADER2_ORIG,		"original" },
			{ (int)SHADER2_MARBLE,		"marble" },
			{ (int)SHADER2_CRYSTAL,		"crystal" },
			{ (int)SHADER2_THERMAL,		"thermal" },
			{ (int)SHADER2_QUAD,		"quad" },
			{ (int)SHADER2_PLASMA,		"plasma" },
			{ (int)SHADER2_PLASTIC,		"plastic" },
			{ (int)SHADER2_KANKER,		"kanker" },
		},
	},
	{ "enemyshader2wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.enemyShader2Wallhack,
		"enable wallhack for players 2nd shader",
	},

	{ "weaponshader1",		"0",			SETTING_INT,		(void*)&eth32.settings.weaponShader1,
		"set the style of chams to be applied to weapons",
		SHADER3_OFF, SHADER3_MAX-1,
		{
			{ (int)SHADER3_OFF,		"off" },
			{ (int)SHADER3_KERAMIC,		"keramic" },
			{ (int)SHADER3_CRISPWAVE,	"crispwave" },
			{ (int)SHADER3_CRYSTAL,		"crystal_a" },
			{ (int)SHADER3_CRYSTALB,	"crystal_b" },
			{ (int)SHADER3_GLOW,		"glow" },
			{ (int)SHADER3_FLAME,		"flame" },
			{ (int)SHADER3_SOLIDA,		"solid_a" },
			{ (int)SHADER3_SOLIDB,		"solid_b" },
			{ (int)SHADER3_WQUADRED,	"wquadred" },
			{ (int)SHADER3_WQUADBLUE,	"wquadblue" },
			{ (int)SHADER3_WQUADMATRIXBLUE,	"wquadmblue" },
			{ (int)SHADER3_WQUADPURPLE,	"wquadpurple" },
			{ (int)SHADER3_WQUADGREEN,	"wquadgreen" },
			{ (int)SHADER3_WQUADYELLOW,	"wquadyellow" },
 			{ (int)SHADER3_WQUADBROWN,	"wquadbrown" },
 			{ (int)SHADER3_WQUADCYAN,	"wquadcyan" },
			{ (int)SHADER3_QUADA,		"quad_a" },
			{ (int)SHADER3_QUADB,		"quad_b" },
			{ (int)SHADER3_QUADC,		"quad_c" },
			{ (int)SHADER3_QUADD,		"quad_d" },
			{ (int)SHADER3_MATRIX,		"matrix" },
			{ (int)SHADER3_THERMAL,		"thermal" },
      			{ (int)SHADER3_XRAY,		"xray" },
      			{ (int)SHADER3_GRID,		"grid" },
     			{ (int)SHADER3_WAVE,		"wave" },
      			{ (int)SHADER3_CRISPY,		"crispy" },
      			{ (int)SHADER3_MARBLE,		"marble" },
      			{ (int)SHADER3_PLASMA,		"plasma" },
      			{ (int)SHADER3_PLASTIC,		"plastic" },
      			{ (int)SHADER3_TEST,		"test" },
      			{ (int)SHADER3_KANKER,		"kanker" },
		},
	},
	{ "weaponshader1wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.weaponShader1Wallhack,
		"enable wallhack for weapons 1st shader",
	},
	{ "weaponshader2",		"0",			SETTING_INT,		(void*)&eth32.settings.weaponShader2,
		"set the style of chams to be applied to weapons outline",
		SHADER4_OFF, SHADER4_MAX-1,
		{
			{ (int)SHADER4_OQUADRED,	"oquadred" },
			{ (int)SHADER4_OQUADBLUE,	"oquadblue" },
			{ (int)SHADER4_OQUAD,		"oquad" },
			{ (int)SHADER4_OMARBLE,		"omarble" },
			{ (int)SHADER4_OCRYSTAL,	"ocrystal" },
			{ (int)SHADER4_OTHERMAL,	"othermal" },
			{ (int)SHADER4_KANKER,		"kanker" },
		},
	},
	{ "weaponshader2wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.weaponShader2Wallhack,
		"enable wallhack for weapons 2nd shader",
	},

	{ "itemshader1",		"11",			SETTING_INT,		(void*)&eth32.settings.itemShader1,
		"set the style of chams to be applied to items",
		SHADER3_OFF, SHADER3_MAX-1,
		{
			{ (int)SHADER3_OFF,		"off" },
			{ (int)SHADER3_KERAMIC,		"keramic" },
			{ (int)SHADER3_CRISPWAVE,	"crispwave" },
			{ (int)SHADER3_CRYSTAL,		"crystal_a" },
			{ (int)SHADER3_CRYSTALB,	"crystal_b" },
			{ (int)SHADER3_GLOW,		"glow" },
			{ (int)SHADER3_FLAME,		"flame" },
			{ (int)SHADER3_SOLIDA,		"solid_a" },
			{ (int)SHADER3_SOLIDB,		"solid_b" },
			{ (int)SHADER3_WQUADRED,	"wquadred" },
			{ (int)SHADER3_WQUADBLUE,	"wquadblue" },
			{ (int)SHADER3_WQUADMATRIXBLUE,	"wquadmblue" },
			{ (int)SHADER3_WQUADPURPLE,	"wquadpurple" },
			{ (int)SHADER3_WQUADGREEN,	"wquadgreen" },
			{ (int)SHADER3_WQUADYELLOW,	"wquadyellow" },
 			{ (int)SHADER3_WQUADBROWN,	"wquadbrown" },
 			{ (int)SHADER3_WQUADCYAN,	"wquadcyan" },
			{ (int)SHADER3_QUADA,		"quad_a" },
			{ (int)SHADER3_QUADB,		"quad_b" },
			{ (int)SHADER3_QUADC,		"quad_c" },
			{ (int)SHADER3_QUADD,		"quad_d" },
			{ (int)SHADER3_MATRIX,		"matrix" },
			{ (int)SHADER3_THERMAL,		"thermal" },
      			{ (int)SHADER3_XRAY,		"xray" },
      			{ (int)SHADER3_GRID,		"grid" },
     			{ (int)SHADER3_WAVE,		"wave" },
      			{ (int)SHADER3_CRISPY,		"crispy" },
      			{ (int)SHADER3_MARBLE,		"marble" },
      			{ (int)SHADER3_PLASMA,		"plasma" },
      			{ (int)SHADER3_PLASTIC,		"plastic" },
      			{ (int)SHADER3_TEST,		"test" },
      			{ (int)SHADER3_KANKER,		"kanker" },
		},
	},
	{ "itemshader1wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.itemShader1Wallhack,
		"enable wallhack for items 1st shader",
	},
	{ "itemshader2",		"6",			SETTING_INT,		(void*)&eth32.settings.itemShader2,
		"set the style of chams to be applied to items outline",
		SHADER4_OFF, SHADER4_MAX-1,
		{
			{ (int)SHADER4_OQUADRED,	"oquadred" },
			{ (int)SHADER4_OQUADBLUE,	"oquadblue" },
			{ (int)SHADER4_OQUAD,		"oquad" },
			{ (int)SHADER4_OMARBLE,		"omarble" },
			{ (int)SHADER4_OCRYSTAL,	"ocrystal" },
			{ (int)SHADER4_OTHERMAL,	"othermal" },
			{ (int)SHADER4_KANKER,		"kanker" },
		},
	},
	{ "itemshader2wallhack",	"true",			SETTING_BOOL,		(void*)&eth32.settings.itemShader2Wallhack,
		"enable wallhack for items 2nd shader",
	},

	{ "colorteam",			"0 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorTeam,
		"set the color of team chams",
	},
	{ "colorteamout",		"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamOut,
		"set the color of team outline",
	},
	{ "colorteamhid",		"0 100 0",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamHidden,
		"set the color of team chams when hidden",
	},
	{ "colorteamweap",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorTeamWeapon,
		"set the color of team weapons",
	},
	{ "teamweapoutline",		"0 255 255",		SETTING_BYTE3,		(void*)eth32.settings.TeamWeaponOutline,
		"set the color of team weapon outline",
	},
	{ "colorenemy",			"255 0 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemy,
		"set the color of enemy chams",
	},
	{ "colorenemyout",		"255 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyOut,
		"set the color of enemy outline",
	},
	{ "colorenemyhid",		"100 0 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyHidden,
		"set the color of enemy chams when hidden",
	},
	{ "colorenemyweap", 		"255 75 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemyWeapon,
		"set the color of enemy weapons",
	},
	{ "enemyweapoutline",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.EnemyWeaponOutline,
		"set the color of enemy weapon outline",
	},
	{ "colorinvuln",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorInvulnerable,
		"set the color of player chams when they are invulnerable",
	},
	{ "colorhealth",		"230 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorHealth,
		"set the color of health kits",
	},
	{ "colorhealthoutline",		"230 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorHealthOutline,
		"set the color of health kits outline",
	},
	{ "colorammo",			"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorAmmo,
		"set the color of ammo boxes",
	},
	{ "colorammooutline",		"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorAmmoOutline,
		"set the color of ammo boxes outline",
	},
	{ "colorworldweapons",		"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorWorldWeapons,
		"set the color of ammo boxes",
	},
	{ "colorworldweaponsoutline",	"0 0 255",		SETTING_BYTE3,		(void*)eth32.settings.colorWorldWeaponsOutline,
		"set the color of ammo boxes",
	},
	{ "colorheadhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorHeadHitbox,
		"set the color of the head hitbox",
	},
	{ "colorbodyhb",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorBodyHitbox,
		"set the color of the body hitbox",
	},
	{ "colorbulletrail",		"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorBulletRail,
		"set the color of bullet tracers",
	},
	{ "colorxaxis",			"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorXAxis,
		"set the color of hitbox x-axis",
	},
	{ "coloryaxis",			"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorYAxis,
		"set the color of hitbox y-axis",
	},
	{ "colorzaxis",			"0 0 1",		SETTING_VEC3,		(void*)eth32.settings.colorZAxis,
		"set the color of hitbox z-axis",
	},
	{ "classteam",			"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.clsTeam,
		"set the color of team class & weapon esp",
	},
	{ "classenemy",			"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.clsEnemy,
		"set the color of enemy class & weapon esp",
	},
	{ "xhaircolor",			"0 1 0",		SETTING_VEC3,		(void*)&eth32.settings.xhairColor,
		"set the crosshair color",
	},
	{ "missilecolor",		"1 1 1",		SETTING_VEC3,		(void*)&eth32.settings.missileEsp,
		"set the missile esp color",
	},
	{ "gui_titlecolor",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.titleColor,
		"set the gui text title color",
	},
	{ "gui_textcolor1",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.textColor1,
		"set the gui text color",
	},
	{ "gui_textcolor2",		"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.guiAssets.textColor2,
		"set the gui text color",
	},
	{ "gui_healthhi",		"0 1 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_healthHi,
		"set the health bar color for full health",
	},
	{ "gui_healthmd",		"1 1 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_healthMd,
		"set the health bar color for half health",
	},
	{ "gui_healthlo",		"1 0 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_healthLo,
		"set the health bar color for low health",
	},
	{ "gui_stamina",		"0 0 1 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_stamina,
		"set the stamina bar color",
	},
	{ "gui_charge",			"1 1 1 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_charge,
		"set the charge bar color",
	},
	{ "gui_overheat",		"1 0 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_overheat,
		"set the overheat bar color",
	},
	{ "gui_reload",			"1 1 0 1",		SETTING_VEC4,		(void*)&eth32.settings.gui_reload,
		"set the reload bar color",
	},

	{ "reaperhead",			"false",		SETTING_BOOL,		(void*)&eth32.settings.reaperHead,
		 "replace original head model with custom reaper one",
 	},
	{ "hitlerhead",			"false",		SETTING_BOOL,		(void*)&eth32.settings.hitlerHead,
		 "replace original head model with custom hitler one",
 	},
	{ "hitlerbody",			"false",		SETTING_BOOL,		(void*)&eth32.settings.hitlerBody,
		 "replace original body model with custom hitler one",
 	},
 	{ "skeletonhead",			"false",		SETTING_BOOL,		(void*)&eth32.settings.skeletonHead,
		 "replace original head model with custom skeleton one",
 	},
 	{ "pighead",			"false",		SETTING_BOOL,		(void*)&eth32.settings.pigHead,
		 "replace original body model with custom pig one",
 	},
 	{ "grinchhead",			"false",		SETTING_BOOL,		(void*)&eth32.settings.grinchHead,
		 "replace original body model with custom grinch one",
 	},
	{ "xhairtype",			"5",			SETTING_INT,		(void*)&eth32.settings.customXhair,
		"set the custom crosshair type",
		XHAIR_OFF, XHAIR_MAX-1,
		{
			{ (int)XHAIR_OFF,		"off" },
			{ (int)XHAIR_SNIPER,		"sniper" },
			{ (int)XHAIR_CROSS, 		"opencross" },
			{ (int)XHAIR_CROSS2, 		"opencross2" },
			{ (int)XHAIR_CROSS3,		"closedcross" },
			{ (int)XHAIR_DOT,		"dot" },
		},
	},
	{ "xhairsize",			"50",			SETTING_FLOAT,		(void*)&eth32.settings.crossSize,
		"set the custom crosshair size",
		0, 500,
	},
	{ "xhairopacity",		"1",			SETTING_FLOAT,		(void*)&eth32.settings.xhairOpacity,
		"set the crosshair opacity",
		0, 1,
	},

	/** *******************************************************************
					MISC
	******************************************************************* **/
	{ "speclist",			"true",			SETTING_BOOL,		(void*)&eth32.settings.getSpeclist,
		 "show who is spectating you",
 	},
	{ "trans_console",		"false",		SETTING_BOOL, 		(void*)&eth32.settings.transparantConsole,
		"make the console transparent so you can see whats going on"
	},
	{ "respawntimers",		"true",			SETTING_BOOL,		(void*)&eth32.settings.respawnTimers,
		"display enemy respawn times",
	},
	{ "autotapout",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoTapout,
		"when killed, auto-tapout and sends you instantly to the reinforcements queue",
	},
	{ "pbscreenshot", 		"1", 			SETTING_INT, 		(void*)&eth32.settings.pbScreenShot,
		"type of PB screenshot",
  		0, PB_SS_MAX-1,
		{
			{ (int)PB_SS_NORMAL,		"normal" },
			{ (int)PB_SS_CUSTOM,		"custom" },
			{ (int)PB_SS_CLEAN,		"clean" },
		},
	},
	{ "origviewvalues",		"false",		SETTING_BOOL,		(void*)&eth32.settings.origViewValues,
		"enable unmodified view calculations",
	},
	{ "interpolatedps",		"true",			SETTING_BOOL,		(void*)&eth32.settings.interpolatedPs,
		"enable interpolated playerstate",
	},
	{ "damagefeedback",		"false",		SETTING_BOOL,		(void*)&eth32.settings.dmgFeedback,
		"enable damage feedback",
	},
	{ "autovote",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoVote,
		"enable autovoting 'no' when a vote is called",
	},
	{ "autocomplaint",		"false",		SETTING_BOOL,		(void*)&eth32.settings.autoComplaint,
		"enable auto filing complaint when someone teamkills you",
	},
	{ "antitk",			"false",		SETTING_BOOL,		(void*)&eth32.settings.antiTk,
		"automatically return fire to teamkillers",
	},
	{ "nudgehack",			"false",		SETTING_BOOL,		(void*)&eth32.settings.nudgeHack,
		"unprotects cl_timenudge cvar so it can be used in any server",
	},

	{ "killsounds",			"true",			SETTING_BOOL,		(void*)&eth32.settings.killSounds,
		"enables sounds to be played when a player is killed",
	},
	{ "randomsounds",		"true",			SETTING_BOOL,		(void*)&eth32.settings.randomSpreeSounds,
		"pick up random spree sounds instead of the classic sequential style",
	},
	{ "hitsounds",			"0",			SETTING_INT,		(void*)&eth32.settings.hitsounds,
		"set the hitsound effect to be used",
		0, HIT_MAX-2,
		{
			{ (int)HIT_OFF,			"off" },
			{ (int)HIT_HEAD,		"head" },
			{ (int)HIT_HEADSHOT,		"headshot" },
			{ (int)HIT_BODY,		"body" },
		},
	},
	{ "puresounds",			"false",		SETTING_BOOL,		(void*)&eth32.settings.pureSounds,
		"only play pure sounds, this will disable anoying custom voicechats",
	},
	{ "hqsounds", 			"true",			SETTING_BOOL,		(void*)&eth32.settings.hqSounds,
		"play HQ sounds (like 'Dynamite Planted')",
	},
	{ "mkillresettime",		"3000",			SETTING_FLOAT,		(void*)&eth32.settings.mkResetTime,
		"period in milliseconds after which multikill sound gets reset",
		0, 10000,
	},

	{ "namesteal", 			"false", 		SETTING_BOOL, 		(void*)&eth32.settings.doNamesteal,
		"Enable namestealing",
	},
	{ "namesteal_delay", 		"700", 			SETTING_INT, 		(void*)&eth32.settings.NamestealDelay,
		"Time to wait between changing names (in ms)",
		0, 20000,
	},
	{ "namesteal_grace", 		"0", 			SETTING_INT, 		(void*)&eth32.settings.NamestealGrace,
		"Time to wait in ms to start stealing after joining a server",
		0, 20000,
	},
	{ "namesteal_mode", 		"0", 			SETTING_INT, 		(void*)&eth32.settings.NamestealMode,
		"Type of namestealing to do",
		0, NAMESTEAL_MAX-1,
		{
			{ (int)NAMESTEAL_TEAM,		"team" },
			{ (int)NAMESTEAL_ENEMY,		"enemy" },
			{ (int)NAMESTEAL_ALL,		"all" },
			{ (int)NAMESTEAL_FILE,		"file" },
		},
	},
	{ "namestealexact", 		"true", 		SETTING_BOOL, 		(void*)&eth32.settings.nsSmartMode,
		"Enable PB proof exact namestealing",
	},

	{ "killspam",			"false",		SETTING_BOOL,		(void*)&eth32.settings.killSpam,
		"enable automated message when a target is killed",
	},
	{ "multikillspam",		"false",		SETTING_BOOL,		(void*)&eth32.settings.multikillSpam,
		"enable automated message when making a multikill",
	},
	{ "deathspam",			"false",		SETTING_BOOL,		(void*)&eth32.settings.deathSpam,
		"enable automated message when you die",
	},
	{ "suicidespam",		"false",		SETTING_BOOL,		(void*)&eth32.settings.suicideSpam,
		"enable automated PM when someone commits suicide",
	},
	{ "selfkillspam",		"false",		SETTING_BOOL,		(void*)&eth32.settings.selfkillSpam,
		"enable automated message when you /kill or suicide",
	},
	{ "pmkillspam",			"false",		SETTING_BOOL,		(void*)&eth32.settings.pmKillspam,
		"make PM killspam to victim instead of global chat",
	},
	{ "killspamtype",		"0",			SETTING_INT,		(void*)&eth32.settings.KillspamType,
		"make killspam for everyone or only selected players",
		0, KILLSPAM_MAX-1,
		{
			{ (int)KILLSPAM_ALL,		"all" },
			{ (int)KILLSPAM_SELECTED,	"selected" },
		},
	},

	/** *******************************************************************
					EXTRA
	******************************************************************* **/
	{ "spoofOs",			"true",			SETTING_BOOL,		(void*)&eth32.settings.etproOs,
		"enable etpro os spoofing\n true = win32, false = linux",
	},
	{ "pk3name",			"eth32nix.pk3",		SETTING_STRING,		(void*)eth32.settings.pk3file,
		"the main eth32 pk3 file name",
	},
	{ "etproGuid",			"",			SETTING_STRING,		(void*)eth32.settings.etproGuid,
		"set your custom etpro GUID",
	},
	{ "jaymac",			"",			SETTING_STRING,		(void*)eth32.settings.jayMac,
		"set your custom jaymod MAC address (prevents bans based on MAC)",
	},
	{ "cvarprefix",			"eth_set",		SETTING_STRING,		(void*)eth32.settings.cvarPrefix,
		"set your custom cvar prefix",
	},
};
